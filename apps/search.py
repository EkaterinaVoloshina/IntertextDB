import streamlit as st
from .search_utils import *


def init_connection():
    return pymongo.MongoClient(st.secrets["mongo"]["key"])


def full_text_reset():
    if 'button' in st.session_state:
        del st.session_state.button
    if 'fulltext' not in st.session_state:
        st.session_state['fulltext'] = False
    st.session_state['fulltext'] = not st.session_state['fulltext']

    
def lemmas_reset():
    if 'button' in st.session_state:
        del st.session_state.button
    if 'lemmas' not in st.session_state:
        st.session_state['lemmas'] = False
    st.session_state['lemmas'] = not st.session_state['lemmas']


def button_reset():
    if 'button' in st.session_state:
        del st.session_state.button


def change_state():
    st.session_state.button = True
    st.session_state.page = 0


def next_page():
    st.session_state['page'] += 1


def prev_page():
    st.session_state['page'] -= 1


def app():
    
    client = init_connection()
    db = client.intertext
    
    col1, col2 = st.columns([1, 8])
    with col2:
        st.header('–ü–æ–∏—Å–∫')
    with col1:
        st.markdown("<h1 style='text-align: center; font-size: 300%'>üîç</h1>",
                    unsafe_allow_html=True)
    st.markdown('–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º –æ—Ç—Å—ã–ª–∫–∏.')

    with st.expander('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'):
        st.markdown('### –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω—ã–º —Ñ–æ—Ä–º–∞–º')
        st.markdown(
            '–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ —Ç–µ–∫—Å—Ç—É –æ—Ç—Å—ã–ª–∫–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º —Å–ª–æ–≤–æ/—Å–æ—á–µ—Ç–∞–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ü—É—à–∫–∏–Ω–∞".')
        st.markdown('### –ü–æ–∏—Å–∫ –ø–æ –ª–µ–º–º–∞–º')
        st.markdown(
            '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –ª–µ–∫—Å–µ–º—ã, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –î–ª—è —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–µ–º–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –ø–æ–ª–µ **–¢–µ–∫—Å—Ç –æ—Ç—Å—ã–ª–∫–∏**. –ù–∞–ø—Ä–∏–º–µ—Ä: "—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ,–ü—É—à–∫–∏–Ω". ')
        st.markdown('### –í—ã–±–æ—Ä –ø–æ–¥–∫–æ—Ä—Ä—É—Å–∞')
        st.markdown('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–æ—Ä–ø—É—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫')
        st.markdown(
            '**–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è**: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º.')
        st.markdown('**–ê–≤—Ç–æ—Ä:** –≤—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')
        st.markdown(
            '**–û—Ç—Å—ã–ª–∫–∞ –Ω–∞**: –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–µ—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–∞, –æ—Ç—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.')
        st.markdown(
            '**–ì–æ–¥—ã –∂–∏–∑–Ω–∏:** –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥—ã –∂–∏–∑–Ω–∏ –∞–≤—Ç–æ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Å–µ –æ—Ç—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–æ–≤, –∂–∏–≤—à–∏—Ö –¥–æ 1900 –≥–æ–¥–∞.')
        st.markdown(
            '**–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–Ω–∏–∫–∞:** –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å–±–æ—Ä–Ω–∏–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫.')
        st.markdown(
            '**–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** –≤—ã –º–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–¥–∫–æ—Ä–ø—É—Å –ø–æ –≥–æ–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–±–æ—Ä–Ω–∏–∫–∞.')
        st.markdown('### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–¥–∞—á–∏')
        st.markdown(
            '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–∞—á—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: **–≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è** –∞–≤—Ç–æ—Ä–∞, **–≥–æ–¥—É —Å–º–µ—Ä—Ç–∏ –∞–≤—Ç–æ—Ä–∞** –∏ **–≥–æ–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** —Å–±–æ—Ä–Ω–∏–∫–∞. –í—ã–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ **–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é** –∏–ª–∏ **–ø–æ —É–±—ã–≤–∞–Ω–∏—é**.')

    st.subheader('–ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω—ã–º —Ñ–æ—Ä–º–∞–º')
    fulltext = st.text_input(
        label='',
        placeholder='—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ü—É—à–∫–∏–Ω–∞',
        key='–ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫',
        on_change=full_text_reset
    )
    st.subheader('–ü–æ–∏—Å–∫ –ø–æ –ª–µ–º–º–∞–º')
    lemmas = st.text_input(
        label='–¢–µ–∫—Å—Ç –æ—Ç—Å—ã–ª–∫–∏:',
        placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Å–≤—è—â–∞—Ç—å,–æ—Ç—Å—ã–ª–∞—Ç—å',
        on_change=lemmas_reset
    )

    st.subheader('–í—ã–±–æ—Ä –ø–æ–¥–∫–æ—Ä–ø—É—Å–∞')

    poem_name = st.multiselect(
        label='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:',
        options=sorted(db.poems.find().distinct("poem_name")),
        on_change=button_reset
    )

    authors = st.multiselect(
        label='–ê–≤—Ç–æ—Ä:',
        options=sorted(db.authors.find().distinct("name"),
                       key=lambda x: x.split()[-1]),
        on_change=button_reset
    )
    persons_ref = st.multiselect(
        label='–û—Ç—Å—ã–ª–∫–∞ –Ω–∞:',
        options=sorted(db.references.find().distinct("person"),
                       key=lambda x: x.split()[-1]),
        on_change=button_reset
    )

    col1, col2, col3 = st.columns([1, 2, 2])
    with col1:
        st.text("–ì–æ–¥—ã –∂–∏–∑–Ω–∏:")
    with col2:
        year_min_a = st.text_input(
            label='—Å',
            key='born_from',
            on_change=button_reset
        )
    with col3:
        year_max_a = st.text_input(
            label='–¥–æ',
            key='born_till',
            on_change=button_reset
        )
    col1, col2 = st.columns([6, 4])
    with col1:
        book_name = st.multiselect(
            label='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–Ω–∏–∫–∞:',
            options=sorted(db.books.find().distinct("book_name")),
            on_change=button_reset
        )
    with col2:
        publishing_company = st.multiselect(
            label='–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ:',
            options=sorted(db.books.find().distinct("publishing_company")),
            on_change=button_reset
        )
    col1, col2, col3 = st.columns([1, 2, 2])
    with col1:
        st.text("–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    with col2:
        year_min_pub = st.text_input(
            label='—Å',
            key='pub_from',
            on_change=button_reset
        )
    with col3:
        year_max_pub = st.text_input(
            label='–¥–æ',
            key='pub_till',
            on_change=button_reset
        )
    col1, col2 = st.columns([5, 5])
    with col1:
        sort_options = {
            'year_born': '–ì–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è',
            'year_dead': '–ì–æ–¥—É —Å–º–µ—Ä—Ç–∏',
            'books.year_published': '–ì–æ–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        }
        sort_year = st.radio(
            label='–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:',
            options=list(sort_options.keys()),
            format_func=lambda x: sort_options[x],
            on_change=button_reset
        )

    with col2:
        sort_dirs = {1: '–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é', -1: '–ü–æ —É–±—ã–≤–∞–Ω–∏—é'}
        sort_direction = st.radio(
            label='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:',
            options=list(sort_dirs.keys()),
            format_func=lambda x: sort_dirs[x],
            on_change=button_reset
        )
    if 'lemmas' not in st.session_state:
        st.session_state['lemmas'] = False
    if 'fulltext' not in st.session_state:
        st.session_state['fulltext'] = False

    if st.session_state['fulltext'] and st.session_state['lemmas']:
        st.warning('–ù–µ–ª—å–∑—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ –ª–µ–º–º–∞–º –∏ —Ç–æ—á–Ω—ã–º —Ñ–æ—Ä–º–∞–º')
    else:
        st.button('–ü–æ–∏—Å–∫', key='1', on_click=change_state)

    if 'button' in st.session_state and st.session_state.button:

        st.markdown("---")

        def results_page(page):
            if st.session_state.fulltext:
                with st.spinner('‚è≥ –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...'):
                    results = fulltext_search(
                        db=db, text=fulltext, authors=authors, year_min_a=year_min_a,
                        year_max_a=year_max_a,
                        poem_name=poem_name, persons_ref=persons_ref,
                        book_name=book_name,
                        year_min_pub=year_min_pub, year_max_pub=year_max_pub,
                        publishing_company=publishing_company, sort_year=sort_year,
                        sort_direction=sort_direction,
                        skip=page * 3
                    )
            else:
                with st.spinner('‚è≥ –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...'):
                    results = main_search(
                        db=db, authors=authors, year_min_a=year_min_a,
                        year_max_a=year_max_a,
                        poem_name=poem_name, persons_ref=persons_ref,
                        book_name=book_name,
                        year_min_pub=year_min_pub, year_max_pub=year_max_pub,
                        publishing_company=publishing_company,
                        lemmas=lemmas, sort_year=sort_year,
                        sort_direction=sort_direction,
                        skip=page * 3
                    )
            results = list(results)
            return results

        results = results_page(st.session_state.page)
        
        st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞')
        if len(results) == 0:
            st.text('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å :(')
        else:
            for result in results:
                st.markdown(
                    'üñã **' + str(result['poem']['poem_name']) + '** (' +
                    result['book']['book_name'] + ', ' + result['book'][
                        'publishing_company'] + ', ' + str(
                        int(result['book']['year_published'])) + ')')
                st.markdown('üë§' + result['author']['name'] + ', ' + str(
                    int(result['author']['year_born'])) + '-' + str(
                    int(result['author']['year_dead'])))
                comment = result['comment']['text']
                for num, ref in enumerate(result['references']):
                    start = ref['start'] + num * 6
                    finish = ref['finish'] + num * 6
                    comment = comment[:start] + '___' + comment[
                                                        start:finish] + '___' + comment[
                                                                                finish:]
                st.markdown(comment + ' [' + result['comment']['author'] + ']')
                with st.expander('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è'):
                    st.text(result['poem']['text'])

        col1, col2, col3 = st.columns([2, 4, 0.5])
        with col1:
            if st.session_state['page'] > 0:
                st.button('<<', on_click=prev_page, key='next')
            else:
                st.text('')
        with col2:
            st.text('')
        with col3:
            if len(results) == 5:
                st.button('>>', on_click=next_page, key='prev')
